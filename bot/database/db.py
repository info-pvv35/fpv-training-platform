import asyncpg
import pytz
from typing import Optional, List, Dict, Any, Tuple
from datetime import datetime, timedelta
from ..config import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
TRACK_TYPES = {
    "race": "üèÅ –ì–æ–Ω–æ—á–Ω–∞—è",
    "freestyle": "ü™Ç –§—Ä–∏—Å—Ç–∞–π–ª",
    "low": "‚¨áÔ∏è Low-Level",
    "tech": "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è",
    "cinematic": "üé• –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–∞—è",
    "training": "üéì –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è",
    "other": "‚ùì –î—Ä—É–≥–æ–µ"
}

VTX_BANDS = {
    "R": [5658, 5732, 5800, 5866, 5934, 6000, 6066, 6132],
    "F": [5740, 5760, 5780, 5800, 5820, 5840, 5860, 5880],
    "E": [5705, 5685, 5665, 5645, 5885, 5905, 5925, 5945]
}

_pool = None


async def init_db_pool():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ PostgreSQL"""
    global _pool
    _pool = await asyncpg.create_pool(
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD,
        min_size=5,
        max_size=20,
        command_timeout=60
    )


async def close_db_pool():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global _pool
    if _pool:
        await _pool.close()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async def fetch(query: str, *args) -> List[Dict[str, Any]]:
    async with _pool.acquire() as conn:
        return await conn.fetch(query, *args)


async def fetchrow(query: str, *args) -> Optional[Dict[str, Any]]:
    async with _pool.acquire() as conn:
        return await conn.fetchrow(query, *args)


async def execute(query: str, *args) -> str:
    async with _pool.acquire() as conn:
        return await conn.execute(query, *args)


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞

async def get_all_trainings() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    return await fetch('''
        SELECT id, city, location, date, time, track_type, current_pilots, max_pilots
        FROM trainings
        ORDER BY date, time
    ''')


async def get_used_channels(training_id: int) -> List[Tuple[str, int]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    rows = await fetch('''
        SELECT vtx_band, vtx_channel
        FROM registrations
        WHERE training_id = $1
    ''', training_id)
    return [(row['vtx_band'], row['vtx_channel']) for row in rows]


def suggest_free_channel(used: List[Tuple[str, int]]) -> Tuple[Optional[str], Optional[int], Optional[int]]:
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
    used_set = set(used)
    for band_name, channels in VTX_BANDS.items():
        for i, freq in enumerate(channels, start=1):
            if (band_name, i) not in used_set:
                return band_name, i, freq
    return None, None, None


async def register_pilot_with_channel(
    training_id: int,
    user_id: int,
    username: str,
    full_name: str,
    preferred_band: str = None,
    preferred_channel: int = None
) -> Tuple[bool, str, Optional[int]]:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∏–ª–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–ª–∏ —Ä—É—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, reg_id)
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω?
    existing = await fetchrow(
        'SELECT id FROM registrations WHERE training_id = $1 AND user_id = $2',
        training_id, user_id
    )
    if existing:
        return False, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.", None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞?
    training = await fetchrow(
        'SELECT current_pilots, max_pilots FROM trainings WHERE id = $1',
        training_id
    )
    if not training:
        return False, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", None
    if training['current_pilots'] >= training['max_pilots']:
        return False, "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.", None

    band, channel, freq = None, None, None

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if preferred_band and preferred_channel:
        if preferred_band in VTX_BANDS and 1 <= preferred_channel <= 8:
            used = await get_used_channels(training_id)
            if (preferred_band, preferred_channel) not in used:
                band, channel = preferred_band, preferred_channel
                freq = VTX_BANDS[preferred_band][channel - 1]
            else:
                return False, f"–ö–∞–Ω–∞–ª {preferred_band}{preferred_channel} —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.", None
        else:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: R3, F5, E1.", None

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if not band:
        used = await get_used_channels(training_id)
        band, channel, freq = suggest_free_channel(used)
        if not band:
            return False, "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.", None

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    row = await fetchrow('''
        INSERT INTO registrations (training_id, user_id, vtx_band, vtx_channel)
        VALUES ($1, $2, $3, $4)
        RETURNING id
    ''', training_id, user_id, band, channel)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–∏–ª–æ—Ç–æ–≤
    await execute(
        'UPDATE trainings SET current_pilots = current_pilots + 1 WHERE id = $1',
        training_id
    )

    return True, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –í–∞—à –∫–∞–Ω–∞–ª: {band}{channel} ({freq} MHz)", row['id']


async def unregister_pilot(training_id: int, user_id: int) -> Tuple[bool, str]:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–∏–ª–æ—Ç–∞"""
    result = await execute(
        'DELETE FROM registrations WHERE training_id = $1 AND user_id = $2',
        training_id, user_id
    )
    if "DELETE 0" in result:
        return False, "–í—ã –Ω–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É."

    await execute(
        'UPDATE trainings SET current_pilots = current_pilots - 1 WHERE id = $1',
        training_id
    )
    return True, "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞."


async def get_pilots_for_training(training_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏–ª–æ—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
    return await fetch('''
        SELECT 
            COALESCE(uc.nickname, '–ê–Ω–æ–Ω–∏–º') as display_name,
            r.vtx_band,
            r.vtx_channel,
            r.paid,
            r.user_id
        FROM registrations r
        LEFT JOIN user_consent uc ON r.user_id = uc.user_id
        WHERE r.training_id = $1
        ORDER BY r.vtx_band, r.vtx_channel
    ''', training_id)


async def delete_training(training_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)"""
    await execute('DELETE FROM trainings WHERE id = $1', training_id)


async def add_training(
    city: str,
    location: str,
    date: str,
    time: str,
    track_type: str = "other",
    max_pilots: int = 10
) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID"""
    row = await fetchrow('''
        INSERT INTO trainings (city, location, date, time, track_type, max_pilots)
        VALUES ($1, $2, $3, $4, $5, $6)
        RETURNING id
    ''', city, location, date, time, track_type, max_pilots)
    return row['id']


# –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏

async def get_admin(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞ –ø–æ user_id"""
    return await fetchrow('SELECT user_id, role, managed_locations FROM admins WHERE user_id = $1', user_id)


async def can_manage_training(user_id: int, city: str, location: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π"""
    admin = await get_admin(user_id)
    if not admin:
        return False
    if admin['role'] == 'super_admin':
        return True
    if admin['role'] == 'location_admin':
        for loc in admin['managed_locations']:
            if loc.get('city') == city and loc.get('location') == location:
                return True
    return False


async def add_admin(user_id: int, role: str, managed_locations: list = None):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
    if managed_locations is None:
        managed_locations = []
    await execute('''
        INSERT INTO admins (user_id, role, managed_locations)
        VALUES ($1, $2, $3)
        ON CONFLICT (user_id) DO UPDATE SET
            role = EXCLUDED.role,
            managed_locations = EXCLUDED.managed_locations
    ''', user_id, role, managed_locations)


async def remove_admin(user_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"""
    await execute('DELETE FROM admins WHERE user_id = $1', user_id)


# 2FA

async def create_2fa_session(user_id: int) -> str:
    """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é 2FA, –≤–µ—Ä–Ω—É—Ç—å –∫–æ–¥"""
    import secrets
    code = str(secrets.randbelow(900000) + 100000)
    expires_at = datetime.now(pytz.UTC) + timedelta(minutes=10)

    await execute('DELETE FROM admin_2fa_sessions WHERE expires_at < NOW()')

    await execute('''
        INSERT INTO admin_2fa_sessions (user_id, secret_code, expires_at)
        VALUES ($1, $2, $3)
    ''', user_id, code, expires_at)

    return code


async def verify_2fa_code(code: str) -> Optional[int]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ 2FA, –≤–µ—Ä–Ω—É—Ç—å user_id –∏–ª–∏ None"""
    row = await fetchrow('''
        SELECT user_id FROM admin_2fa_sessions
        WHERE secret_code = $1 AND expires_at > NOW()
    ''', code)
    if row:
        await execute('DELETE FROM admin_2fa_sessions WHERE secret_code = $1', code)
        return row['user_id']
    return None


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–æ–≤

async def log_admin_action(admin_user_id: int, action: str, target_id: int = None, details: dict = None):
    """–ó–∞–ø–∏—Å–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –ª–æ–≥"""
    await execute('''
        INSERT INTO admin_audit_log (admin_user_id, action, target_id, details)
        VALUES ($1, $2, $3, $4)
    ''', admin_user_id, action, target_id, details)


# –†–∞–±–æ—Ç–∞ —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

async def get_user_consent(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return await fetchrow('SELECT consent_given, lang FROM user_consent WHERE user_id = $1', user_id)


async def set_user_consent(user_id: int, username: str, full_name: str, lang: str = 'ru'):
    """–ó–∞–ø–∏—Å–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await execute('''
        INSERT INTO user_consent (user_id, username, nickname, consent_given, consent_date, lang)
        VALUES ($1, $2, $3, 1, NOW(), $4)
        ON CONFLICT (user_id) DO UPDATE SET
            consent_given = 1,
            consent_date = NOW(),
            lang = EXCLUDED.lang
    ''', user_id, username, full_name, lang)


async def set_user_nickname(user_id: int, nickname: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await execute('UPDATE user_consent SET nickname = $1 WHERE user_id = $2', nickname, user_id)


async def delete_user_data(user_id: int):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await execute('DELETE FROM registrations WHERE user_id = $1', user_id)
    await execute('DELETE FROM user_consent WHERE user_id = $1', user_id)
import asyncio
import logging
import signal
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram_i18n import I18nMiddleware
from aiogram_i18n.cores import YamlCore
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiohttp import web
from .config import (
    BOT_TOKEN, SENTRY_DSN, WEBHOOK_URL,
    DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASSWORD
)
from .database.db import init_db_pool, close_db_pool
from .middlewares.i18n import ACLMiddleware
from .handlers.user import router as user_router
from .handlers.admin import router as admin_router
from .handlers.payments import router as payments_router, setup_payment_webhooks
from .handlers.voice import router as voice_router
import sentry_sdk

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sentry
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        traces_sample_rate=1.0,
        profiles_sample_rate=1.0,
        environment="production",
    )
    logger.info("‚úÖ Sentry initialized")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
runner = None
site = None

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    logger.info("üöÄ Bot starting...")
    await init_db_pool()
    logger.info("‚úÖ Database pool initialized")

    if WEBHOOK_URL:
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url != f"{WEBHOOK_URL}/webhook":
            await bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
            logger.info(f"üîó Webhook set to {WEBHOOK_URL}/webhook")
        else:
            logger.info("üîó Webhook already set")

async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üõë Bot shutting down...")

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    global runner, site
    if site:
        await site.stop()
        logger.info("‚úÖ Web server stopped")
    if runner:
        await runner.cleanup()

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–µ–¥—É–ª–µ—Ä–∞
    if hasattr(bot, 'scheduler') and bot.scheduler:
        bot.scheduler.shutdown()
        logger.info("‚úÖ Scheduler shutdown")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ë–î
    await close_db_pool()
    logger.info("‚úÖ Database pool closed")

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
    await bot.session.close()
    logger.info("‚úÖ Bot session closed")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–µ–¥—É–ª–µ—Ä–∞
    scheduler = AsyncIOScheduler()
    scheduler.start()
    bot.scheduler = scheduler  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –±–æ—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
    logger.info("‚úÖ Scheduler started")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    i18n_middleware = I18nMiddleware(
        core=YamlCore(path="bot/utils/localization/{locale}.yaml"),
        default_locale="ru",
    )
    i18n_middleware.setup(dp)
    dp.message.middleware(ACLMiddleware())
    dp.callback_query.middleware(ACLMiddleware())
    logger.info("‚úÖ i18n middleware configured")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(user_router)
    dp.include_router(admin_router)
    dp.include_router(payments_router)
    dp.include_router(voice_router)
    logger.info("‚úÖ All routers registered")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ startup/shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    try:
        if WEBHOOK_URL:
            # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
            setup_payment_webhooks(app, bot)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ–±—Ö—É–∫ –±–æ—Ç–∞
            SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            setup_application(app, dp, bot=bot)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            global runner, site
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', 8080)
            await site.start()
            logger.info(f"üåê Webhook server started on http://0.0.0.0:8080")
            logger.info(f"üîó Webhook URL: {WEBHOOK_URL}/webhook")

            # –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            while True:
                await asyncio.sleep(3600)  # –°–ø–∏–º 1 —á–∞—Å, –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–±—Ö—É–∫

        else:
            # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ long polling
            logger.info("üì° Starting bot in polling mode...")
            await dp.start_polling(bot)

    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Bot crashed: {e}")
        raise
    finally:
        await on_shutdown(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        logger.critical(f"üí• Fatal error: {e}")
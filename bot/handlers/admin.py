from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram_i18n import I18nContext
from ..database.db import *
from ..config import ADMIN_ID

router = Router()


async def notify_new_admin(bot, user_id: int, role: str, locations=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É"""
    try:
        if role == 'super_admin':
            message = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ FPV-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n\n"
                "üëë *–†–æ–ª—å:* –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–ª–æ—â–∞–¥–∫–∞–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º."
            )
        else:
            message = (
                "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ FPV-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n\n"
                "üìç *–†–æ–ª—å:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–ª–æ—â–∞–¥–æ–∫\n"
            )
            if locations:
                loc_str = "\n".join([f" - {loc['city']} ‚Üí {loc['location']}" for loc in locations])
                message += f"–í–∞—à–∏ –ø–ª–æ—â–∞–¥–∫–∏:\n{loc_str}"
            else:
                message += "–í–∞—à–∏ –ø–ª–æ—â–∞–¥–∫–∏ –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ."

        message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."

        await bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {user_id}: {e}")


@router.message(Command("add_super_admin"))
async def add_super_admin(message: Message, i18n: I18nContext):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    admin = await get_admin(user_id)

    if not admin or admin['role'] != 'super_admin':
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_super_admin USER_ID")
        return

    try:
        new_admin_id = int(args[1])
        await add_admin(new_admin_id, 'super_admin')
        await notify_new_admin(message.bot, new_admin_id, 'super_admin')
        await log_admin_action(user_id, 'add_super_admin', new_admin_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("add_admin"))
async def add_location_admin(message: Message, i18n: I18nContext):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–ª–æ—â–∞–¥–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    admin = await get_admin(user_id)

    if not admin or admin['role'] != 'super_admin':
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤ –ø–ª–æ—â–∞–¥–æ–∫.")
        return

    args = message.text.split()
    if len(args) < 4:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin USER_ID –≥–æ—Ä–æ–¥ –ª–æ–∫–∞—Ü–∏—è [–≥–æ—Ä–æ–¥2 –ª–æ–∫–∞—Ü–∏—è2 ...]")
        return

    try:
        new_admin_id = int(args[1])
        locations = []
        loc_args = args[2:]

        if len(loc_args) % 2 != 0:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—ã: –≥–æ—Ä–æ–¥ –ª–æ–∫–∞—Ü–∏—è –≥–æ—Ä–æ–¥ –ª–æ–∫–∞—Ü–∏—è ...")
            return

        for i in range(0, len(loc_args), 2):
            city = loc_args[i]
            location = loc_args[i + 1]
            locations.append({"city": city, "location": location})

        await add_admin(new_admin_id, 'location_admin', locations)
        await notify_new_admin(message.bot, new_admin_id, 'location_admin', locations)
        await log_admin_action(user_id, 'add_location_admin', new_admin_id, {"locations": locations})

        loc_str = "; ".join([f"{loc['city']} - {loc['location']}" for loc in locations])
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω –ø–ª–æ—â–∞–¥–æ–∫ {new_admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω.\n–ü–ª–æ—â–∞–¥–∫–∏: {loc_str}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("remove_admin"))
async def remove_admin_cmd(message: Message, i18n: I18nContext):
    """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    admin = await get_admin(user_id)

    if not admin or admin['role'] != 'super_admin':
        await message.answer("‚õî –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin USER_ID")
        return

    try:
        admin_id = int(args[1])
        await remove_admin(admin_id)
        await log_admin_action(user_id, 'remove_admin', admin_id)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("list_admins"))
async def list_admins(message: Message, i18n: I18nContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"""
    user_id = message.from_user.id
    admin = await get_admin(user_id)

    if not admin:
        await message.answer("‚õî –í—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return

    rows = await fetch('''
        SELECT user_id, role, managed_locations FROM admins ORDER BY role, user_id
    ''')

    if not rows:
        await message.answer("üìã –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    text = "üìã *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n\n"
    for row in rows:
        text += f"üÜî {row['user_id']} | {row['role']}\n"
        if row['role'] == 'location_admin' and row['managed_locations']:
            for loc in row['managed_locations']:
                text += f"   ‚Üí {loc.get('city', '?')} - {loc.get('location', '?')}\n"
        text += "\n"

    await message.answer(text, parse_mode="Markdown")


@router.message(Command("add_training"))
async def add_training_cmd(message: Message, i18n: I18nContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    args = message.text.split()

    if len(args) < 5:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_training –≥–æ—Ä–æ–¥ –ª–æ–∫–∞—Ü–∏—è –¥–∞—Ç–∞ –≤—Ä–µ–º—è [—Ç–∏–ø] [–º–µ—Å—Ç]\n"
            "–ü—Ä–∏–º–µ—Ä: /add_training –ú–æ—Å–∫–≤–∞ –ü–∞—Ä–∫ 2025-06-01 18:00 race 12"
        )
        return

    try:
        city = args[1]
        location = args[2]
        date = args[3]
        time = args[4]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not await can_manage_training(user_id, city, location):
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π.")
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        track_type = "other"
        max_pilots = 10

        extra_args = args[5:]
        if extra_args and extra_args[-1].isdigit():
            max_pilots = int(extra_args[-1])
            extra_args = extra_args[:-1]

        if extra_args and extra_args[0] in TRACK_TYPES:
            track_type = extra_args[0]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
        training_id = await add_training(city, location, date, time, track_type, max_pilots)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await log_admin_action(user_id, 'add_training', training_id, {
            'city': city,
            'location': location,
            'date': date,
            'time': time,
            'track_type': track_type,
            'max_pilots': max_pilots
        })

        await message.answer(
            f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üèôÔ∏è {city} | üìç {location}\n"
            f"üìÖ {date} üïí {time}\n"
            f"üéØ {TRACK_TYPES.get(track_type, '–î—Ä—É–≥–æ–µ')} | üë• {max_pilots} –º–µ—Å—Ç"
        )

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ –≤—ã —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ scheduler –≤ utils)
        # from ..utils.scheduler import schedule_reminders
        # schedule_reminders(message.bot, message.bot.scheduler, training_id, date, time)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")


@router.message(Command("admin"))
async def admin_panel_cmd(message: Message, i18n: I18nContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–≤ –±—É–¥—É—â–µ–º ‚Äî –∫–Ω–æ–ø–∫–∏)"""
    user_id = message.from_user.id
    admin = await get_admin(user_id)

    if not admin:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    await message.answer(
        "üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_training ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/add_admin ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–ª–æ—â–∞–¥–æ–∫\n"
        "/add_super_admin ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞\n"
        "/remove_admin ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        "/list_admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
        parse_mode="Markdown"
    )


# TRACK_TYPES ‚Äî –∫–æ–ø–∏—è –∏–∑ db.py –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
TRACK_TYPES = {
    "race": "üèÅ –ì–æ–Ω–æ—á–Ω–∞—è",
    "freestyle": "ü™Ç –§—Ä–∏—Å—Ç–∞–π–ª",
    "low": "‚¨áÔ∏è Low-Level",
    "tech": "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è",
    "cinematic": "üé• –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–∞—è",
    "training": "üéì –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è",
    "other": "‚ùì –î—Ä—É–≥–æ–µ"
}
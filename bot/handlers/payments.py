import asyncio
import hashlib
import json
import logging
from aiogram import Router, F, Bot
from aiogram.types import (
    Message, PreCheckoutQuery, LabeledPrice, InlineKeyboardButton,
    InlineKeyboardMarkup, WebAppInfo, CallbackQuery
)
from aiogram.filters import Command
#from aiogram.filters import ContentTypesFilter
from aiogram.enums import ContentType
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiogram_i18n import I18nContext
from ..database.db import *
from ..config import (
    PROVIDER_TOKEN, YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY,
    STRIPE_SECRET_KEY, WEBHOOK_URL, SCHEDULE_URL
)
import uuid
from datetime import datetime
import pytz
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle
import os
from io import BytesIO
import qrcode
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
yoo_client = None
if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    from yookassa import Configuration, Payment as YooPayment
    Configuration.configure(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY)
    yoo_client = YooPayment

if STRIPE_SECRET_KEY:
    import stripe
    stripe.api_key = STRIPE_SECRET_KEY

router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è PDF
FONT_PATH = os.path.join(os.path.dirname(__file__), "..", "DejaVuSans.ttf")
if os.path.exists(FONT_PATH):
    pdfmetrics.registerFont(TTFont('DejaVu', FONT_PATH))


def generate_qr_code(data: str) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è PDF"""
    qr = qrcode.QRCode(version=1, box_size=4, border=2)
    qr.add_data(data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    buffer = BytesIO()
    img.save(buffer, format="PNG")
    buffer.seek(0)
    return buffer


async def generate_receipt_pdf(
    reg_id: int,
    user_name: str,
    amount: float,
    channel: str,
    date_str: str,
    location: str,
    payment_id: str,
    is_refund: bool = False
) -> BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-—á–µ–∫–∞ —Å QR-–∫–æ–¥–æ–º"""
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # –®—Ä–∏—Ñ—Ç
    font_name = "DejaVu" if os.path.exists(FONT_PATH) else "Helvetica"
    p.setFont(font_name, 12)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    p.setFillColor(colors.blue)
    p.setFont("Helvetica-Bold", 16)
    title = "FPV TRAINING ‚Äî –ö–í–ò–¢–ê–ù–¶–ò–Ø" if not is_refund else "FPV TRAINING ‚Äî –ß–ï–ö –í–û–ó–í–†–ê–¢–ê"
    p.drawCentredString(width / 2, height - 50, title)
    p.setFillColor(colors.black)
    p.setFont(font_name, 12)

    # –î–∞–Ω–Ω—ã–µ
    y = height - 100
    lines = [
        f"ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_id}",
        f"–ü–∏–ª–æ—Ç: {user_name}",
        f"–°—É–º–º–∞: {amount} —Ä—É–±.",
        f"–ö–∞–Ω–∞–ª VTX: {channel}",
        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {location}",
        f"–î–∞—Ç–∞: {date_str}",
        f"ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id[:8]}...",
        f"–í—Ä–µ–º—è –≤—ã–¥–∞—á–∏: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')}",
    ]

    if is_refund:
        lines.append("–°—Ç–∞—Ç—É—Å: –í–û–ó–í–†–ê–¢ –°–†–ï–î–°–¢–í")

    lines.append("")
    lines.append("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–ª—ë—Ç–æ–≤ üöÅ")

    for line in lines:
        p.drawString(50, y, line)
        y -= 20

        # QR-–∫–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    qr_data = f"fpv_verify:{reg_id}:{payment_id}:{int(amount * 100)}:{int(is_refund)}"
    qr_buffer = generate_qr_code(qr_data)
    p.drawImage(Image.open(qr_buffer), width - 150, 100, 100, 100)

    p.setFont("Helvetica", 10)
    p.drawString(width - 150, 85, "–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"
    p.setFillColor(colors.blue)
    p.setFont("Helvetica-Bold", 12)
    p.drawString(50, 70, "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
    p.linkURL(SCHEDULE_URL, (50, 70, 250, 90), relative=0)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x1, y1, x2, y2
    p.setFillColor(colors.black)

    p.showPage()
    p.save()
    buffer.seek(0)
    return buffer


@router.message(Command("my_payments"))
async def my_payments(message: Message, i18n: I18nContext):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    payments = await fetch('''
        SELECT 
            r.id as reg_id,
            r.payment_id,
            r.paid,
            r.payment_date,
            t.location,
            t.date,
            t.time,
            r.vtx_band,
            r.vtx_channel,
            r.paid as is_paid
        FROM registrations r
        JOIN trainings t ON r.training_id = t.id
        WHERE r.user_id = $1
        ORDER BY r.payment_date DESC NULLS LAST, r.created_at DESC
    ''', user_id)

    if not payments:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.")
        return

    text = "üìã *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:*\n\n"
    for p in payments:
        status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if p['is_paid'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
        if p['payment_date']:
            date_str = p['payment_date'].strftime('%Y-%m-%d %H:%M')
        else:
            date_str = "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        text += (
            f"üÜî {p['reg_id']} | {p['location']} ({p['date']} {p['time']})\n"
            f"üì° {p['vtx_band']}{p['vtx_channel']} | {status} | {date_str}\n"
            f"üí≥ {p['payment_id'][:8] if p['payment_id'] else 'N/A'}\n\n"
        )

    await message.answer(text, parse_mode="Markdown")


@router.message(F.text == "/refund")
async def refund_menu(message: Message, i18n: I18nContext):
    """–ú–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    user_id = message.from_user.id

    registrations = await fetch('''
        SELECT r.id, r.payment_id, r.paid, t.location, t.date, t.time, r.vtx_band, r.vtx_channel
        FROM registrations r
        JOIN trainings t ON r.training_id = t.id
        WHERE r.user_id = $1 AND r.paid = 1
        ORDER BY t.date DESC, t.time DESC
    ''', user_id)

    if not registrations:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
        return

    keyboard = []
    for reg in registrations:
        btn_text = f"–í–µ—Ä–Ω—É—Ç—å: {reg['location']} ({reg['date']} {reg['time']}) ‚Äî {reg['vtx_band']}{reg['vtx_channel']}"
        keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"refund_{reg['id']}")])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_refund")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤:", reply_markup=markup)


@router.callback_query(F.data.startswith("refund_"))
async def process_refund(callback: CallbackQuery, bot: Bot, i18n: I18nContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç"""
    reg_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    reg = await fetchrow('''
        SELECT r.id, r.payment_id, r.paid, t.location, t.date, t.time, r.vtx_band, r.vtx_channel, r.user_id, r.training_id
        FROM registrations r
        JOIN trainings t ON r.training_id = t.id
        WHERE r.id = $1
    ''', reg_id)

    if not reg or reg['user_id'] != user_id or not reg['paid']:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.", show_alert=True)
        return

    # –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await execute('DELETE FROM registrations WHERE id = $1', reg_id)
    await execute('UPDATE trainings SET current_pilots = current_pilots - 1 WHERE id = $1', reg['training_id'])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —á–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞
    pdf_buffer = await generate_receipt_pdf(
        reg_id,
        callback.from_user.full_name,
        0.0,
        f"{reg['vtx_band']}{reg['vtx_channel']}",
        f"{reg['date']} {reg['time']}",
        reg['location'],
        reg['payment_id'],
        is_refund=True
    )

    await bot.send_document(
        chat_id=user_id,
        document=("refund_receipt.pdf", pdf_buffer),
        caption="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω.\n\n–ß–µ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞:"
    )

    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)
    await callback.message.delete()


@router.message(F.text.startswith("/pay_custom"))
async def pay_custom_amount(message: Message, i18n: I18nContext):
    """–û–ø–ª–∞—Ç–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã"""
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay_custom TRAINING_ID –°–£–ú–ú–ê_–í_–†–£–ë–õ–Ø–•")
        return

    try:
        training_id = int(args[1])
        amount_rub = float(args[2])
        amount_kopek = int(amount_rub * 100)

        if amount_kopek < 100:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 1 —Ä—É–±–ª—å.")
            return

        training = await fetchrow('SELECT location, date, time FROM trainings WHERE id = $1', training_id)
        if not training:
            await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        prices = [LabeledPrice(label=f"–û–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è: {training['location']}", amount=amount_kopek)]

        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="FPV –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ‚Äî –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞",
            description=f"–û–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {training['location']} ({training['date']} {training['time']})",
            payload=f"fpv_{training_id}_{message.from_user.id}",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter=f"fpv_{training_id}",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


@router.message(F.text.startswith("/pay_yoo"))
async def pay_with_yookassa(message: Message, i18n: I18nContext):
    """–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa"""
    if not yoo_client:
        await message.answer("–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pay_yoo TRAINING_ID")
        return

    try:
        training_id = int(args[1])
        training = await fetchrow('SELECT location, date, time FROM trainings WHERE id = $1', training_id)
        if not training:
            await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        amount = 500.0
        user_id = message.from_user.id

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = yoo_client.create({
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{(await message.bot.get_me()).username}"
            },
            "capture": True,
            "description": f"–û–ø–ª–∞—Ç–∞ FPV —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ #{training_id}",
            "metadata": {
                "training_id": str(training_id),
                "user_id": str(user_id),
                "source": "telegram"
            }
        })

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        reg_id = await fetchrow('''
            INSERT INTO registrations (training_id, user_id, vtx_band, vtx_channel, paid, payment_id)
            VALUES ($1, $2, $3, $4, 0, $5)
            RETURNING id
        ''', training_id, user_id, "R", 1, payment.id)

        await message.answer(
            f"üî∑ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa\n\n"
            f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {training['location']}\n"
            f"–î–∞—Ç–∞: {training['date']} {training['time']}\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±.\n\n"
            f"üëâ [–û–ø–ª–∞—Ç–∏—Ç—å]({payment.confirmation.confirmation_url})",
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–ÆKassa –æ—à–∏–±–∫–∞: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ÆKassa: {e}")


# ========================
# WEBHOOKS
# ========================

async def yookassa_webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç –ÆKassa"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        body = await request.json()
        event = body.get('event')
        payment_data = body.get('object')

        if event != 'payment.succeeded':
            return web.Response(status=200)

        payment_id = payment_data['id']
        metadata = payment_data.get('metadata', {})
        training_id = int(metadata.get('training_id', 0))
        user_id = int(metadata.get('user_id', 0))

        if not training_id or not user_id:
            return web.Response(status=400)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        reg = await fetchrow('SELECT id, vtx_band, vtx_channel FROM registrations WHERE payment_id = $1', payment_id)
        if not reg:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            success, message, reg_id = await register_pilot_with_channel(
                training_id, user_id, f"user_{user_id}", f"User {user_id}"
            )
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {message}")
                return web.Response(status=500)

            # –û–±–Ω–æ–≤–ª—è–µ–º payment_id
            await execute('UPDATE registrations SET payment_id = $1, paid = 1, payment_date = NOW() WHERE id = $2', payment_id, reg_id)
            reg = await fetchrow('SELECT id, vtx_band, vtx_channel FROM registrations WHERE id = $1', reg_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot = Bot(token=PROVIDER_TOKEN.split(":")[0])  # HACK: –±–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ PROVIDER_TOKEN
        try:
            training = await fetchrow('SELECT location, date, time FROM trainings WHERE id = $1', training_id)
            if training:
                channel_str = f"{reg['vtx_band']}{reg['vtx_channel']}"
                pdf_buffer = await generate_receipt_pdf(
                    reg['id'],
                    f"User {user_id}",
                    float(payment_data['amount']['value']),
                    channel_str,
                    f"{training['date']} {training['time']}",
                    training['location'],
                    payment_id
                )

                await bot.send_document(
                    chat_id=user_id,
                    document=("receipt.pdf", pdf_buffer),
                    caption=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞!\n–í–∞—à –∫–∞–Ω–∞–ª: {channel_str}\n\n–ß–µ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω."
                )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫: {e}")

        return web.Response(status=200)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ÆKassa: {e}")
        return web.Response(status=500)


async def stripe_webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Stripe (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    if not STRIPE_SECRET_KEY:
        return web.Response(status=400)

    payload = await request.text()
    sig_header = request.headers.get('Stripe-Signature')

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, os.getenv("STRIPE_WEBHOOK_SECRET")
        )
    except ValueError:
        return web.Response(status=400)
    except stripe.error.SignatureVerificationError:
        return web.Response(status=400)

    if event['type'] == 'payment_intent.succeeded':
        payment_intent = event['data']['object']
        metadata = payment_intent.get('metadata', {})
        training_id = int(metadata.get('training_id', 0))
        user_id = int(metadata.get('user_id', 0))

        if training_id and user_id:
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ÆKassa ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∏–ª–æ—Ç–∞
            success, message, reg_id = await register_pilot_with_channel(
                training_id, user_id, f"user_{user_id}", f"User {user_id}"
            )
            if success:
                await execute('UPDATE registrations SET paid = 1, payment_id = $1 WHERE id = $2', payment_intent['id'], reg_id)

    return web.Response(status=200)


# ========================
# SETUP WEBHOOKS
# ========================

def setup_payment_webhooks(app, bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤ –¥–ª—è aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if YOOKASSA_SHOP_ID:
        app.router.add_post('/webhook/yookassa', yookassa_webhook_handler)

    if STRIPE_SECRET_KEY:
        app.router.add_post('/webhook/stripe', stripe_webhook_handler)


@router.pre_checkout_query()
async def precheckout_handler(query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(query.id, ok=True)


@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: Message, bot: Bot, i18n: I18nContext):
    payment = message.successful_payment
    payload = payment.invoice_payload
    user_id = message.from_user.id

    try:
        parts = payload.split('_')
        if len(parts) < 3 or parts[0] != "fpv":
            raise ValueError("Invalid payload")

        training_id = int(parts[1])
        payer_id = int(parts[2])
        if payer_id != user_id:
            raise ValueError("User mismatch")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        return

    consent = await get_user_consent(user_id)
    if not consent or not consent.get('consent_given'):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–∞–π—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ: /start")
        return

    nickname = consent.get('nickname') if consent else None
    if not nickname:
        nickname = message.from_user.full_name

    success, reg_message, reg_id = await register_pilot_with_channel(
        training_id,
        user_id,
        message.from_user.username or f"user_{user_id}",
        nickname
    )

    if not success:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {reg_message}")
        return

    await execute('''
        UPDATE registrations
        SET paid = 1, payment_id = $1, payment_date = NOW()
        WHERE id = $2
    ''', payment.telegram_payment_charge_id, reg_id)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-—á–µ–∫–∞
    training = await fetchrow('SELECT location, date, time FROM trainings WHERE id = $1', training_id)
    if training:
        channel_str = reg_message.split("–í–∞—à –∫–∞–Ω–∞–ª: ")[-1].split(" ")[0] if "–í–∞—à –∫–∞–Ω–∞–ª: " in reg_message else "N/A"
        pdf_buffer = await generate_receipt_pdf(
            reg_id,
            nickname,
            payment.total_amount / 100,
            channel_str,
            f"{training['date']} {training['time']}",
            training['location'],
            payment.telegram_payment_charge_id
        )

        await bot.send_document(
            chat_id=user_id,
            document=("receipt.pdf", pdf_buffer),
            caption="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –í–∞—à —á–µ–∫:"
        )

    await message.answer(f"‚úÖ {reg_message}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üöÅ", parse_mode="Markdown")
import asyncio
import os
import logging
from aiogram import Router, F
from aiogram.types import Message, Voice
from aiogram_i18n import I18nContext
from ..config import OPENAI_API_KEY
from ..database.db import get_admin
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
if OPENAI_API_KEY:
    openai.api_key = OPENAI_API_KEY

router = Router()


@router.message(F.voice)
async def handle_voice_message(message: Message, i18n: I18nContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–æ–≤"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω?
    admin = await get_admin(user_id)
    if not admin:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
        return

    voice: Voice = message.voice

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        file_info = await message.bot.get_file(voice.file_id)
        voice_file = f"voice_{user_id}_{voice.file_unique_id}.oga"

        await message.bot.download_file(file_info.file_path, destination=voice_file)
        logger.info(f"üîä –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {voice_file}")

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞)
        transcript = await asyncio.to_thread(
            openai.Audio.transcribe,
            model="whisper-1",
            file=open(voice_file, "rb"),
            language="ru"
        )
        text = transcript["text"]
        logger.info(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {text}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∞–¥–º–∏–Ω—É
        await message.answer(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: _{text}_", parse_mode="Markdown")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ GPT
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-4-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç FPV-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–º–∞–Ω–¥—É –¥–ª—è Telegram-–±–æ—Ç–∞. "
                        "–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add_training –ú–æ—Å–∫–≤–∞ –ü–∞—Ä–∫ 2025-06-01 18:00 race 10) "
                        "–∏–ª–∏ —Ñ—Ä–∞–∑–æ–π '–ù–µ –ø–æ–Ω—è–ª'. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π."
                    )
                },
                {
                    "role": "user",
                    "content": f"–ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: {text}"
                }
            ],
            temperature=0.0,
            max_tokens=100
        )

        command = response.choices[0].message.content.strip()
        logger.info(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")

        if command.startswith("/"):
            # –≠–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            fake_message = Message(
                message_id=message.message_id,
                from_user=message.from_user,
                chat=message.chat,
                date=message.date,
                text=command
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞—Ç—å
            if command.startswith("/add_training"):
                from .admin import add_training_cmd
                await add_training_cmd(fake_message, i18n)
            elif command.startswith("/add_admin"):
                from .admin import add_location_admin
                await add_location_admin(fake_message, i18n)
            elif command.startswith("/add_super_admin"):
                from .admin import add_super_admin
                await add_super_admin(fake_message, i18n)
            elif command.startswith("/search"):
                from .user import search_trainings_cmd
                await search_trainings_cmd(fake_message, i18n)
            else:
                await message.answer(f"‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–º: {command}")

            await message.answer(f"‚úÖ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: `{command}`", parse_mode="Markdown")

        else:
            await message.answer(f"‚ùå –ù–µ –ø–æ–Ω—è–ª: {text}")

    except openai.error.AuthenticationError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á OpenAI.")
        logger.error("OpenAI AuthenticationError")
    except openai.error.RateLimitError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI –ø—Ä–µ–≤—ã—à–µ–Ω.")
        logger.error("OpenAI RateLimitError")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}", exc_info=True)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(voice_file):
            try:
                os.remove(voice_file)
                logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {voice_file}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {voice_file}: {e}")